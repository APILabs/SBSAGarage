def srcfolder = 'MF_DEAStatements' 
def appName = 'ace-demo' 
def projectName = 'ace-sbsa' 
pipeline {
    agent any
    stages
     {
        stage('Build Ant')
        {
           steps {
            	withAnt(installation: 'antlocal') 
		{
			sh "ant -buildfile ./${env.PROJECT_NAME}/Build/build.xml"
		}
            }
				
        }
	stage('cleanup') 
	{
      	  steps 
	  {
            script 
	    {
              openshift.withCluster('mycluster') 
	      {
                openshift.withProject(projectName)
		{
                  openshift.selector("all", [ build : appName ]).delete() 
		  if (openshift.selector("pods", [ app : appName ]).exists()) 
		  { 
                    openshift.selector("all", [ app : appName ]).delete() 
                  }
                }
              }
            }
          }
        }
	stage("Build Image") 
	{
              steps 
	      {
                dir(srcfolder) 
		{
                  sh "cat Build/dockerfile | oc new-build -D - --name  ${appName}"
                }
              }
          }
	  stage("Start Build") 
	{
              steps 
	      {
                dir(srcfolder) 
		{
                  sh "oc start-build ${appName} --from-dir . --follow"
                }
              }
          }
	  stage('Run') 
	  {
      	  steps 
	  {
            script 
	    {
              openshift.withCluster('mycluster') 
	      {
                openshift.withProject(projectName)
		{
                   def created = openshift.newApp( "${appName}:latest", '-e LICENSE=accept -e ACE_SERVER_NAME=ACESERVER' , "--name=${appName}")
		   echo "new-app created ${created.count()} objects named: ${created.names()}"
        	   created.describe()
		   
		   def rm = openshift.selector("dc", appName).rollout()
                   timeout(2) 
		   { 
		      openshift.selector("dc", appName).related('pods').untilEach(1) 
			{
			  return (it.object().status.phase == "Running")
			}
                  }
		}
              }
            }
          }
        }
	stage('Expose App') 
    	{
	    steps {
		sh """
		    oc expose service ${appName} --name=${appName}-webui --port=7600 --generator="route/v1"
		    oc expose service ${appName} --name=${appName}-http --port=7800 --generator="route/v1"
		  
		    echo " '**HTTP HostName**' oc get route ${appName}-http -o=go-template='{{ .spec.host}}"
		    echo '************** hostname to access the webui*************' 
		    oc get route ${appName}-webui -o=go-template='{{ .spec.host}}'
		  """  
	    }
	}
    }
}
