def env = 'ACE_Dev'
def srcfolder = 'MF_DEAStatements'
def laststable = '55'
def laststableapp = 'ace-demo-'+ "${laststable}"
def appName = 'ace-demo-'+ "${BUILD_ID}"
def projectName = 'ace-sbsa'
pipeline {
    agent any
    stages{
        stage('Build Ant'){
           steps {
                withAnt(installation: 'antlocal') {
                        sh "ant -buildfile ./ACE_Dev/MF_DEAStatements/Build/build.xml"
                }
            }

        }
        stage("Build Image") {
              steps{
                dir('ACE_Dev/MF_DEAStatements'){
                  sh "cat Build/dockerfile | oc new-build -D - --name  ${appName}"
                }
              }
          }
          stage("Start Build") {
              steps{
                dir('ACE_Dev/MF_DEAStatements'){
                  sh "oc start-build ${appName} --from-dir . --follow"
                }
              }
          }
          stage('Run')
          {
          steps{
            script {
              openshift.withCluster('mycluster'){
                openshift.withProject(projectName) {
                   def created = openshift.newApp( "${appName}:latest", '-e LICENSE=accept -e ACE_SERVER_NAME=ACESERVER' , "--name=${appName}")
                   echo "new-app created ${created.count()} objects named: ${created.names()}"
                   created.describe()

                   def rm = openshift.selector("dc", appName).rollout()
                   timeout(2){
                      openshift.selector("dc", appName).related('pods').untilEach(1) {
                          return (it.object().status.phase == "Running")
                        }
                  }
                }
              }
            }
          }
        }
        stage('Expose App')
        {
            steps {
                sh """
                    oc expose service ${appName} --name=${appName}-webui --port=7600 --generator="route/v1"
                    oc expose service ${appName} --name=${appName}-http --port=7800 --generator="route/v1"

                    echo '************** hostname to access the webui*************'
                    oc get route ${appName}-http -o=go-template='{{ .spec.host}}'
                    echo '************** hostname to access the webui*************'
                    oc get route ${appName}-webui -o=go-template='{{ .spec.host}}'
                  """
            }
        }
        stage('cleanup') {
          steps{
            script {
              openshift.withCluster('mycluster', 'id-token-client'){
                    openshift.withProject(projectName)
                    {
                      openshift.selector("all", [ build : laststableapp ]).delete()
                      if (openshift.selector("pods", [ app : laststableapp ]).exists())
                      {
                       openshift.selector("all", [ app : laststableapp ]).delete()
                      }
                    }
              }
            }
          }
        }
    }
}
